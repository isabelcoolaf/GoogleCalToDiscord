package edu.wsu.cs320.gui.Customizer;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.wsu.cs320.gui.control.GuiResponse;
import edu.wsu.cs320.gui.control.ResponsiveGUI;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

public class Customizer implements ResponsiveGUI<Customizer.CustomizerCode> {
    private JPanel mainPanel;
    private JPanel previewPanel;
    private JPanel buttonPanel;
    private JButton backButton;
    private JButton changeImageButton;
    private JPanel imagePanel;
    private JLabel usingLabel;
    private JLabel calendarName;
    private JPanel progressPanel;
    private JProgressBar progressBar1;
    private JLabel descriptionLabel;
    private JLabel progressLeft;
    private JLabel progressRight;
    private JPanel mainTextPanel;
    private CompletableFuture<GuiResponse<CustomizerCode>> pendingResponse;
    private BufferedImage image;

    public enum CustomizerCode {
        BACK, CHANGE_IMAGE
    }

    public Customizer(JFrame frame) {
        $$$setupUI$$$();
        backButton.addActionListener(e -> completeResponse(CustomizerCode.BACK));
        changeImageButton.addActionListener(e -> {
            JFileChooser fileSelector = new JFileChooser();
            int returnVal = fileSelector.showOpenDialog(frame); // Where frame is the parent component
            File file = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileSelector.getSelectedFile();
            } else {
                JOptionPane.showMessageDialog(frame, "Invalid file selected");
            }
            if (file == null) return;
            if (!file.isFile() || !file.canRead()) {
                JOptionPane.showMessageDialog(frame, "Please select a valid image.");
                return;
            }
            try {
                image = ImageIO.read(file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(frame, "Could not read image: " + ex.getLocalizedMessage());
                return;
            }
            imagePanel.removeAll();
            Image scaled = image.getScaledInstance(60, 60, Image.SCALE_DEFAULT);
            ImageIcon icon = new ImageIcon(scaled);
            JLabel label = new JLabel(icon);
            imagePanel.setLayout(new GridLayout(0, 1));
            imagePanel.add(label);
            imagePanel.validate();
            imagePanel.repaint();
            completeResponse(CustomizerCode.CHANGE_IMAGE);
        });
    }

    private void completeResponse(CustomizerCode code) {
        if (pendingResponse == null) return;
        pendingResponse.complete(new GuiResponse<CustomizerCode>(GuiResponse.ResponseCode.OK, code));
    }

    public BufferedImage getImage() {
        return image;
    }

    @Override
    public JPanel getGuiPanel() {
        return mainPanel;
    }

    @Override
    public GuiResponse<CustomizerCode> getResponse() {
        pendingResponse = new CompletableFuture<>();
        GuiResponse<CustomizerCode> result = new GuiResponse<>(GuiResponse.ResponseCode.INCOMPLETE_DATA, null);
        try {
            result = pendingResponse.get();
        } catch (InterruptedException | ExecutionException e) {
            pendingResponse.complete(new GuiResponse<>(GuiResponse.ResponseCode.CANCELLED, null));
        }
        return result;
    }

    @Override
    public void onWindowClose() {
        if (pendingResponse == null) return;
        pendingResponse.complete(new GuiResponse<CustomizerCode>(GuiResponse.ResponseCode.WINDOW_CLOSED, null));
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setMinimumSize(new Dimension(340, 120));
        mainPanel.setPreferredSize(new Dimension(340, 120));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(buttonPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        buttonPanel.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        changeImageButton = new JButton();
        changeImageButton.setText("Change Image");
        buttonPanel.add(changeImageButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        previewPanel = new JPanel();
        previewPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), 3, 0));
        previewPanel.setBackground(new Color(-13026751));
        previewPanel.setForeground(new Color(-13026751));
        mainPanel.add(previewPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(340, 100), new Dimension(340, 100), new Dimension(340, 100), 0, false));
        imagePanel = new JPanel();
        imagePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 0, 0));
        previewPanel.add(imagePanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 60), new Dimension(60, 60), new Dimension(60, 60), 0, false));
        usingLabel = new JLabel();
        usingLabel.setBackground(new Color(-2104859));
        Font usingLabelFont = this.$$$getFont$$$(null, -1, -1, usingLabel.getFont());
        if (usingLabelFont != null) usingLabel.setFont(usingLabelFont);
        usingLabel.setForeground(new Color(-2565675));
        usingLabel.setText("Using GC2D");
        previewPanel.add(usingLabel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        mainTextPanel = new JPanel();
        mainTextPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainTextPanel.setBackground(new Color(-13026751));
        mainTextPanel.setForeground(new Color(-13026751));
        previewPanel.add(mainTextPanel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, 1, 1, null, null, null, 0, false));
        calendarName = new JLabel();
        calendarName.setBackground(new Color(-13026751));
        calendarName.setForeground(new Color(-2039330));
        calendarName.setText("<Calendar Name>");
        mainTextPanel.add(calendarName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionLabel = new JLabel();
        descriptionLabel.setBackground(new Color(-13026751));
        descriptionLabel.setForeground(new Color(-2039330));
        descriptionLabel.setText("<Calendar Description>");
        mainTextPanel.add(descriptionLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressPanel = new JPanel();
        progressPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        progressPanel.setBackground(new Color(-13026751));
        progressPanel.setForeground(new Color(-13026751));
        mainTextPanel.add(progressPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        progressLeft = new JLabel();
        progressLeft.setBackground(new Color(-13026751));
        progressLeft.setForeground(new Color(-2039330));
        progressLeft.setText("00:00");
        progressPanel.add(progressLeft, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressRight = new JLabel();
        progressRight.setBackground(new Color(-13026751));
        progressRight.setForeground(new Color(-2039330));
        progressRight.setText("XX:XX");
        progressPanel.add(progressRight, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar1 = new JProgressBar();
        progressBar1.setBackground(new Color(-13552840));
        progressPanel.add(progressBar1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setForeground(new Color(-13026751));
        previewPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }


}
